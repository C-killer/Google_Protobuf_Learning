// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
namespace PERSON {
class SameName;
struct SameNameDefaultTypeInternal;
extern SameNameDefaultTypeInternal _SameName_default_instance_;
}  // namespace PERSON
PROTOBUF_NAMESPACE_OPEN
template<> ::PERSON::SameName* Arena::CreateMaybeMessage<::PERSON::SameName>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PERSON {

enum PhoneColor : int {
  RED = 0,
  YELLOW = 6,
  BLUE = 9,
  PhoneColor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PhoneColor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PhoneColor_IsValid(int value);
constexpr PhoneColor PhoneColor_MIN = RED;
constexpr PhoneColor PhoneColor_MAX = BLUE;
constexpr int PhoneColor_ARRAYSIZE = PhoneColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PhoneColor_descriptor();
template<typename T>
inline const std::string& PhoneColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PhoneColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PhoneColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PhoneColor_descriptor(), enum_t_value);
}
inline bool PhoneColor_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PhoneColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PhoneColor>(
    PhoneColor_descriptor(), name, value);
}
// ===================================================================

class SameName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PERSON.SameName) */ {
 public:
  inline SameName() : SameName(nullptr) {}
  ~SameName() override;
  explicit PROTOBUF_CONSTEXPR SameName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SameName(const SameName& from);
  SameName(SameName&& from) noexcept
    : SameName() {
    *this = ::std::move(from);
  }

  inline SameName& operator=(const SameName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SameName& operator=(SameName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SameName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SameName* internal_default_instance() {
    return reinterpret_cast<const SameName*>(
               &_SameName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SameName& a, SameName& b) {
    a.Swap(&b);
  }
  inline void Swap(SameName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SameName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SameName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SameName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SameName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SameName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SameName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PERSON.SameName";
  }
  protected:
  explicit SameName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 5,
    kNameFieldNumber = 2,
    kSexFieldNumber = 3,
    kInfoFieldNumber = 6,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 4,
  };
  // repeated .PERSON.PhoneColor color = 5;
  int color_size() const;
  private:
  int _internal_color_size() const;
  public:
  void clear_color();
  private:
  ::PERSON::PhoneColor _internal_color(int index) const;
  void _internal_add_color(::PERSON::PhoneColor value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_color();
  public:
  ::PERSON::PhoneColor color(int index) const;
  void set_color(int index, ::PERSON::PhoneColor value);
  void add_color(::PERSON::PhoneColor value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_color();

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_NODISCARD std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // .INFO.SameName info = 6;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::INFO::SameName& info() const;
  PROTOBUF_NODISCARD ::INFO::SameName* release_info();
  ::INFO::SameName* mutable_info();
  void set_allocated_info(::INFO::SameName* info);
  private:
  const ::INFO::SameName& _internal_info() const;
  ::INFO::SameName* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::INFO::SameName* info);
  ::INFO::SameName* unsafe_arena_release_info();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PERSON.SameName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::INFO::SameName* info_;
  int32_t id_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SameName

// int32 id = 1;
inline void SameName::clear_id() {
  id_ = 0;
}
inline int32_t SameName::_internal_id() const {
  return id_;
}
inline int32_t SameName::id() const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.id)
  return _internal_id();
}
inline void SameName::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void SameName::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PERSON.SameName.id)
}

// bytes name = 2;
inline void SameName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SameName::name() const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SameName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PERSON.SameName.name)
}
inline std::string* SameName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PERSON.SameName.name)
  return _s;
}
inline const std::string& SameName::_internal_name() const {
  return name_.Get();
}
inline void SameName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SameName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SameName::release_name() {
  // @@protoc_insertion_point(field_release:PERSON.SameName.name)
  return name_.Release();
}
inline void SameName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PERSON.SameName.name)
}

// string sex = 3;
inline void SameName::clear_sex() {
  sex_.ClearToEmpty();
}
inline const std::string& SameName::sex() const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SameName::set_sex(ArgT0&& arg0, ArgT... args) {
 
 sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PERSON.SameName.sex)
}
inline std::string* SameName::mutable_sex() {
  std::string* _s = _internal_mutable_sex();
  // @@protoc_insertion_point(field_mutable:PERSON.SameName.sex)
  return _s;
}
inline const std::string& SameName::_internal_sex() const {
  return sex_.Get();
}
inline void SameName::_internal_set_sex(const std::string& value) {
  
  sex_.Set(value, GetArenaForAllocation());
}
inline std::string* SameName::_internal_mutable_sex() {
  
  return sex_.Mutable(GetArenaForAllocation());
}
inline std::string* SameName::release_sex() {
  // @@protoc_insertion_point(field_release:PERSON.SameName.sex)
  return sex_.Release();
}
inline void SameName::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sex_.IsDefault()) {
    sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PERSON.SameName.sex)
}

// int32 age = 4;
inline void SameName::clear_age() {
  age_ = 0;
}
inline int32_t SameName::_internal_age() const {
  return age_;
}
inline int32_t SameName::age() const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.age)
  return _internal_age();
}
inline void SameName::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void SameName::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:PERSON.SameName.age)
}

// repeated .PERSON.PhoneColor color = 5;
inline int SameName::_internal_color_size() const {
  return color_.size();
}
inline int SameName::color_size() const {
  return _internal_color_size();
}
inline void SameName::clear_color() {
  color_.Clear();
}
inline ::PERSON::PhoneColor SameName::_internal_color(int index) const {
  return static_cast< ::PERSON::PhoneColor >(color_.Get(index));
}
inline ::PERSON::PhoneColor SameName::color(int index) const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.color)
  return _internal_color(index);
}
inline void SameName::set_color(int index, ::PERSON::PhoneColor value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:PERSON.SameName.color)
}
inline void SameName::_internal_add_color(::PERSON::PhoneColor value) {
  color_.Add(value);
}
inline void SameName::add_color(::PERSON::PhoneColor value) {
  _internal_add_color(value);
  // @@protoc_insertion_point(field_add:PERSON.SameName.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SameName::color() const {
  // @@protoc_insertion_point(field_list:PERSON.SameName.color)
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SameName::_internal_mutable_color() {
  return &color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SameName::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:PERSON.SameName.color)
  return _internal_mutable_color();
}

// .INFO.SameName info = 6;
inline bool SameName::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool SameName::has_info() const {
  return _internal_has_info();
}
inline const ::INFO::SameName& SameName::_internal_info() const {
  const ::INFO::SameName* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::INFO::SameName&>(
      ::INFO::_SameName_default_instance_);
}
inline const ::INFO::SameName& SameName::info() const {
  // @@protoc_insertion_point(field_get:PERSON.SameName.info)
  return _internal_info();
}
inline void SameName::unsafe_arena_set_allocated_info(
    ::INFO::SameName* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PERSON.SameName.info)
}
inline ::INFO::SameName* SameName::release_info() {
  
  ::INFO::SameName* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::INFO::SameName* SameName::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:PERSON.SameName.info)
  
  ::INFO::SameName* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::INFO::SameName* SameName::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::INFO::SameName>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::INFO::SameName* SameName::mutable_info() {
  ::INFO::SameName* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:PERSON.SameName.info)
  return _msg;
}
inline void SameName::set_allocated_info(::INFO::SameName* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:PERSON.SameName.info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PERSON

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PERSON::PhoneColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PERSON::PhoneColor>() {
  return ::PERSON::PhoneColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
